import requests, uuid, time, json, random, random_address
from requests_toolbelt import MultipartEncoder
from multiprocessing.dummy import Pool as ThreadPool
from bs4 import BeautifulSoup as soup
from collections import OrderedDict
import cloudscraper

proxyList = []

def loadProxies():
    proxies = open('proxies.txt').read().splitlines()
    for proxy in proxies:
        try:
            if len(proxy.split(":")) == 2:
                ip = proxy.split(":")[0]
                port = proxy.split(":")[1]
                proxyData = {'http': 'http://{}:{}'.format(ip, port), 'https': 'http://{}:{}'.format(ip, port)}
                proxyList.append(proxyData)
            else:
                ip = proxy.split(":")[0]
                port = proxy.split(":")[1]
                user = proxy.split(":")[2]
                password = proxy.split(":")[3]
                proxyData = {'http': 'http://{}:{}@{}:{}'.format(user, password, ip, port), 'https': 'http://{}:{}@{}:{}'.format(user, password, ip, port)}
                proxyList.append(proxyData)
        except:
            pass

try:
    loadProxies()
except:
    pass

def multi_run_wrapper(args):
   return entering(*args)

def entering(firstName, lastName, email):
    getAddress = False
    while getAddress == False:
        try:
            listState = ["CT", "MA", "VT", "AL", "AR", "DC", "FL", "GA", "KY", "MD", "OK", "TN", "TX", "AK", "AZ", "CA", "CO", "HI"]
            stateSelected = random.choice(listState)
            addressCheckout = random_address.real_random_address_by_state(stateSelected)

            address = addressCheckout["address1"]
            #zipCode = addressCheckout["postalCode"]
            #address2 = addressCheckout["address2"]
            getAddress = True
        except Exception as e:
            continue
    fullName = firstName + " " + lastName
    listZip = ['11368', '11385', '11208', '11236', '10467', '11373', '11226', '11207', '10025', '11214', '11234', '10314', '11220', '11219', '11230', '11206', '10456', '11221', '10458', '11233', '11229', '11377', '11235', '11223', '10468', '11204', '11355', '10453', '10452', '11203', '10457', '10462', '11212', '10029', '10002', '11218', '11375', '10466', '10469', '11215', '10463', '11209', '11691', '10977', '11213', '11201', '14850', '11746', '11372', '10472', '11706', '11434', '10701', '11717', '11211', '10023', '11210', '10027', '11432', '10312', '10024', '11216', '10031', '10950', '11435', '10033', '11550', '10032', '10473', '10009', '10460', '11225', '11238', '10128', '10016', '10306', '12550', '14221', '10003', '14580', '11758', '12180', '11354', '10461', '10011', '11420', '10459', '10940', '11205', '11237', '14094', '10451', '11419', '11590', '11224', '10028', '11374', '10952', '10465', '11003', '11772', '10040', '11413', '11365', '11228', '11757', '11520', '10305', '10475', '14075', '12065', '14120', '11357', '10019', '10304', '13760', '11756', '11580', '10034', '14450', '10455', '12601', '11421', '11040', '14215', '10021', '11249', '11743', '11367', '11217', '14150', '11412', '12603', '10583', '11433', '13440', '10801', '10573', '11801', '14224', '14609', '11106', '11704', '11231', '13501', '11378', '10705', '11379', '11222', '10026', '10550', '14701', '11561', '11364', '14624', '11418', '10454', '12866', '10301', '11779', '13601', '11105', '11358', '11554', '13021', '10035', '12590', '11722', '11710', '11103', '10309', '13027', '13126', '12401', '14086', '11787', '11510', '14612', '14225', '11566', '11422', '13502', '12020', '10562', '11101', '10022', '11417', '10010', '12309', '11735', '14621', '14534', '12901', '10704', '11901', '10030', '11050', '11369', '11793', '10065', '11731', '11423', '11414', '10956', '12203', '10036', '14127', '10308', '11803', '11361', '14226', '10014', '11763', '11572', '11370', '14626', '12303', '10013', '11542', '11727', '13090', '11720', '10598', '11725', '11429', '14304', '11530', '11232', '11570', '14424', '13045', '11102', '11701', '14606', '12302', '11967', '11104', '12804', '10303', '13905', '12306', '12010', '11356', '10039', '14616', '11741', '11553', '11416', '10001', '11001', '12553', '10954', '10710', '10541', '11729', '12205', '11552', '12533', '11791', '14623', '10310', '11427', '11795', '14207', '14043', '11010', '10566', '11784', '10901', '14220', '11692', '14216', '14228', '10512', '13069', '14618', '14213', '14620', '14211', '10591', '10075', '10471', '10038', '10703', '11776', '11714', '12047', '13208', '10552', '12078', '10708', '11581', '13850', '14217', '11762', '14617', '11694', '14020', '10012', '14223', '11563', '12208', '13088', '11783', '11726', '12144', '11411', '10543', '14214', '14206', '11501', '14072', '10805', '11436', '13820', '11428', '11768', '10990', '14845', '14227', '11426', '10567', '13212', '11937', '14218', '12304', '10605', '11415', '10509', '13204', '11360', '13901', '14420', '14526', '12110', '12508', '13210', '14051', '10603', '11738', '10037', '11790', '11021', '12589', '11747', '13903', '11362', '14456', '14830', '14559', '13790', '12831', '12189', '14611', '12477', '12534', '14468', '10302', '11575', '11798', '14615', '12561', '14052', '10580', '11754', '14607', '11703', '13205', '14760', '11030', '10538', '11950', '13039', '11733', '13206', '13203', '11946', '13104', '12118', '14305', '11788', '12054', '10470', '11004', '13662', '13413', '13031', '14564', '11780', '14222', '11239', '10606', '13219', '14613', '12206', '14901', '12524', '10549', '10965', '10017', '11782', '14210', '13669', '10960', '10804', '14048', '12771', '12801', '10307', '14904', '11951', '12019', '12182', '12953', '13215', '14619', '10941', '12538', '13057', '11953', '11767', '11693', '12308', '11702', '12211', '11598', '13676', '14513', '11366', '10924', '10530', '14610', '11751', '12528', '12839', '10980', '10528', '11968', '14063', '11753', '10514', '14411', '11764', '14622', '11730', '13815', '10520', '12566', '13209', '13032', '10803', '11742', '14425', '13421', '13207', '11961', '14527', '11576', '10570', '14586', '13066', '13603', '10918', '11949', '10927', '14843', '12701', '14519', '12095', '14201', '11755', '10044', '12586', '14212', '11577', '11778', '14301', '14608', '14004', '13041', '13617', '11545', '10604', '12188', '13323', '10522', '14810', '13827', '10970', '14454', '10474', '14605', '11766', '13492', '10536', '14208', '14219', '13078', '10601', '12210', '12549', '14092', '14032', '13619', '14103', '10510', '14467', '13148', '10930', '11740', '11596', '13357', '10553', '11518', '10707', '10709', '12414', '12569', '11023', '14502', '12061', '12209', '11771', '14625', '11716', '14870', '12828', '13165', '13350', '14001', '10523', '13037', '13036', '14522', '14031', '10992', '13642', '14059', '13904', '14472', '14006', '14895', '12571', '11752', '11797', '11777', '11713', '12540', '11096', '11565', '10706', '14437', '14209', '13367', '11792', '11769', '13214', '10920', '12572', '11558', '12202', '13224', '10005', '10280', '10923', '13035', '11963', '11559', '14482', '12009', '11024', '12159', '10504', '12803', '10989', '14905', '10579', '11516', '11705', '11557', '12204', '13365', '10007', '13244', '12033', '10018', '14204', '10595', '12564', '14892', '11934', '14057', '12043', '13152', '13029', '14011', '12307', '14141', '12754', '14445', '13340', '11789', '10533', '14085', '13732', '14589', '14470', '14068', '12018', '11363', '14489', '10547', '13202', '12563', '13114', '12721', '14428', '14903', '12983', '10590', '13403', '12198', '12184', '14464', '10589', '11560', '14779', '12305', '10994', '14132', '12077', '12972', '12428', '11507', '12570', '11933', '11709', '14414', '11971', '12222', '11109', '10507', '11786', '10607', '13077', '13073', '14886', '14303', '14530', '14568', '12158', '10282', '11721', '12051', '10996', '12832', '13902', '12186', '13339', '13142', '13211', '13346', '14047', '14569', '13108', '12834', '12582', '11020', '14070', '13316', '10577', '12822', '14514', '13135', '13856', '10506', '13118', '14487', '12518', '14469', '14706', '10502', '13753', '10983', '14837', '12542', '14174', '13865', '10069', '12090', '14009', '14108', '13309', '10516', '14551', '14867', '13778', '13166', '14036', '11942', '13159', '10913', '10962', '13624', '12986', '10594', '12143', '12025', '13407', '13605', '12170', '14432', '12833', '10532', '11579', '12446', '14590', '14727', '13326', '13053', '10993', '14801', '13830', '11940', '10560', '14505', '14131', '13733', '10576', '14546', '11952', '14136', '10928', '13452', '12084', '14510', '12522', '11980', '10004', '12883', '12845', '12123', '14261', '14423', '14105', '13308', '12887', '12134', '11514', '12157', '14787', '12962', '13068', '11944', '14883', '14572', '14512', '12498', '10963', '12816', '12946', '13849', '11804', '12148', '14750', '12790', '12037', '14891', '14802', '11568', '14042', '12027', '12885', '10464', '12580', '14067', '10916', '13803', '13637', '13833', '12545', '13074', '14548', '11954', '14871', '13460', '10524', '14737', '13140', '14541', '10925', '12053', '14532', '14080', '12944', '11715', '10548', '12929', '12871', '13317', '14485', '10921', '14416', '14882', '13811', '14433', '12758', '12196', '13838', '12594', '12487', '13329', '12443', '13634', '11796', '14202', '12083', '13456', '10926', '14025', '13082', '10006', '14772', '13862', '12992', '12122', '13033', '11697', '13439', '13602', '12458', '10987', '11732', '13030', '14823', '12404', '12809', '13116', '13743', '11978', '10998', '14125', '13491', '12015', '13084', '11749', '12865', '13655', '13748', '11719', '13080', '14062', '14733', '14738', '13132', '13408', '13354', '14710', '14757', '12827', '12449', '12484', '12526', '13656', '13787', '13417', '10958', '14821', '13476', '13668', '14719', '14521', '14543', '13478', '11977', '12514', '14812', '13461', '14111', '10588', '10974', '11718', '13480', '12154', '12413', '12543', '11935', '12520', '13795', '13691', '13667', '11964', '14098', '13131', '12846', '13044', '12072', '12117', '13167', '14755', '12919', '14081', '12183', '13438', '14807', '14627', '12138', '11724', '14809', '13730', '11955', '14770', '12074', '12068', '14172', '12918', '13411', '12966', '14712', '12075', '14735', '12547', '14817', '14471', '13754', '12733', '14034', '12546', '12821', '12835', '14012', '13825', '14865', '13060', '13658', '14724', '11549', '14517', '13332', '13040', '13654', '14561', '12850', '10984', '13606', '14739', '13471', '12788', '13613', '13143', '12921', '10537', '14840', '14716', '13092', '10968', '12094', '14775', '13783', '13612', '13101', '14525', '14715', '12167', '14604', '10973', '11941', '13146', '13164', '14170', '12567', '14476', '12759', '13424', '13160', '12916', '14726', '12926', '13110', '13363', '13812', '12979', '12981', '13626', '13734', '14847', '13416', '12531', '14879', '13493', '14516', '12056', '13076', '12974', '10162', '14767', '13616', '12121', '14873', '13673', '12149', '10511', '12920', '12057', '12106', '14782', '14814', '14560', '14435', '12070', '14058', '12173', '14813', '14744', '13685', '12207', '14005', '11439', '13620', '12780', '12578', '12052', '12137', '12859', '13646', '12192', '14853', '13495', '12197', '13409', '13327', '13324', '12023', '14747', '11976', '14838', '14743', '12466', '11005', '11548', '13843', '13320', '14544', '12910', '12775', '13797', '14718', '10976', '12581', '12747', '14203', '13699', '12996', '13425', '13648', '12523', '13459', '12928', '13083', '12501', '12817', '12776', '12604', '14806', '14711', '12748', '14818', '13736', '13156', '14826', '12789', '13052', '12575', '13120', '14138', '13034', '14422', '13746', '12958', '14533', '12193', '13809', '12529', '13622', '14030', '12516', '12491', '14741', '14171', '14139', '12583', '13660', '14781', '12060', '12525', '13042', '14167', '10526', '12740', '13661', '14101', '13304', '13024', '13063', '14040', '12185', '12168', '14898', '12486', '13652', '14481', '13026', '13111', '13431', '14427', '12737', '12977', '10986', '12515', '12455', '14556', '13775', '13697', '13608', '12870', '12086', '14880', '12903', '14013', '12764', '11509', '11739', '14477', '14008', '14065', '13625', '12066', '13112', '12723', '13607', '14024', '13328', '12116', '12481', '12937', '12440', '12062', '13343', '13433', '12431', '12155', '14033', '14591', '12912', '14804', '10917', '12521', '14478', '14091', '13757', '12577', '12067', '12941', '13348', '14504', '12592', '12166', '12959', '12140', '10578', '12957', '12993', '12059', '12093', '12935', '13485', '13650', '14466', '13630', '13618', '14894', '12853', '10501', '12726', '12430', '13144', '14550', '14889', '13145', '14102', '14778', '10964', '12457', '13302', '13315', '12092', '13303', '12565', '12751', '14869', '13744', '14054', '14028', '12779', '12451', '12783', '13810', '12468', '13428', '13801', '13694', '14858', '13158', '12461', '13839', '11939', '14709', '13464', '13680', '12917', '14055', '13808', '12729', '13338', '12472', '12814', '12504', '14803', '12496', '12863', '12125', '11794', '14731', '13081', '14145', '12502', '13335', '12967', '13835', '10505', '13679', '14129', '13469', '10919', '12485', '12785', '13477', '12956', '12076', '12423', '12463', '13122', '13368', '14860', '12913', '14066', '12997', '13473', '13402', '11569', '14861', '14614', '13807', '13322', '14723', '12734', '14571', '12932', '14753', '14418', '13681', '10931', '14109', '12087', '13318', '13054', '14859', '14740', '13355', '14864', '12719', '13864', '14555', '12837', '13420', '13635', '13325', '10546', '11932', '10969', '14143', '12980', '13490', '12029', '12815', '13802', '13813', '11957', '13684', '13796', '14037', '12548', '14507', '13788', '12585', '14728', '12934', '11960', '12464', '12914', '13731', '12058', '12409', '13752', '10596', '12824', '13334']
    zipCode = random.choice(listZip)
    entered = False
    while entered == False:
        try:
            session = cloudscraper.create_scraper()
            if len(proxyList) != 0:
                session.proxies = random.choice(proxyList)
            url = "https://newyork.doverstreetmarket.com/new-items/raffle-st"
            session.headers = OrderedDict([
                ('Accept', 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9'),
                ('Accept-Encoding', 'gzip, deflate, br'),
                ('Accept-Language', 'en-GB,en-US;q=0.9,en;q=0.8'),
                ('Cache-Control', 'max-age=0'),
                ('Content-Type', 'application/x-www-form-urlencoded'),
                ('Origin', 'https://newyork.doverstreetmarket.com'),
                ('Referer', url),
                ('Sec-Ch-Ua', '"Chromium";v="110", "Not A(Brand";v="24", "Google Chrome";v="110"'),
                ('Sec-Ch-Ua-Mobile', '?0'),
                ('Sec-Ch-Ua-Platform', '"macOS"'),
                ('Sec-Fetch-Dest', 'document'),
                ('Sec-Fetch-Mode', 'navigate'),
                ('Sec-Fetch-Site', 'cross-site'),
                ('Sec-Fetch-User', '?1'),
                ('Upgrade-Insecure-Requests', '1'),
                ('User-Agent', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36')
            ])
            timeOut = False
            while timeOut == False:
                try:
                    data = session.get(url, timeout=10)
                    timeOut = True
                except Exception as e:
                    if len(proxyList) != 0:
                        session.proxies = random.choice(proxyList)
            formContainer = soup(data.text, 'html.parser')
            listScripts = formContainer.findAll('link', {'rel': 'alternate stylesheet'})
            for each in listScripts:
                if 'www.tfaforms.com/dist/form-builder/' in str(each) and 'jsonly' in str(each):
                    url = each['href']
            timeOut = False
            while timeOut == False:
                try:
                    data = session.get(url, timeout=10)
                    timeOut = True
                except Exception as e:
                    if len(proxyList) != 0:
                        session.proxies = random.choice(proxyList)
            sizeList = []
            listSize = formContainer.find('select', {'name':'tfa_17'}).findAll('option')
            for each in listSize:
                if "US " in str(each):
                    sizeList.append(each['value'])
                
            formID = formContainer.find('input', {'name':'tfa_dbFormId'})['value']
            dbControl = formContainer.find('input', {'name':'tfa_dbControl'})['value']
            formVersion = formContainer.find('input', {'name':'tfa_dbVersionId'})['value']
            responseID = formContainer.find('input', {'name':'tfa_dbResponseId'})['value']
            sessionUUID = formContainer.find('input', {'name':'tfa_dbWorkflowSessionUuid'})['value']
            switchOff = formContainer.find('input', {'name':'tfa_switchedoff'})['value']
            if len(proxyList) != 0:
                session.proxies = random.choice(proxyList)
            url = "https://www.tfaforms.com/api_v2/workflow/processor"

            size = random.choice(sizeList)

            #colorList = ["tfa_78", "tfa_79"]
            #color = random.choice(colorList)

            payload = {
                "tfa_1": fullName,
                "tfa_9": str(random.randint(2000000000,9999999999)),
                "tfa_2": email,
                "tfa_11": address,
                "tfa_15": zipCode,
                "tfa_17": size, #Sizing tfa_40 tfa_42 tfa_23 tfa_25 tfa_27 tfa_29 tfa_31 tfa_33 tfa_35
                #"tfa_62": color, #Color tfa_78 tfa_79
                "tfa_6": "tfa_6",
                "tfa_dbFormId": formID,
                "tfa_dbResponseId": responseID,
                "tfa_dbControl": dbControl,
                "tfa_dbWorkflowSessionUuid": sessionUUID,
                "tfa_dbVersionId": formVersion,
                "tfa_switchedoff": switchOff
            }
            hasEntered = False
            timeOut = False
            while timeOut == False:
                try:
                    data = session.post(url, data=payload, timeout=10)
                    print(data)
                    if "thank_you" in str(data.url):
                        hasEntered = True
                    timeOut = True
                except Exception as e:
                    if len(proxyList) != 0:
                        session.proxies = random.choice(proxyList)
            
            if hasEntered == True:
                with open('Entered-dsmny.txt', 'a') as f:
                    data2save = email + ":" + str(size) + ":" + color
                    print(data2save)
                    f.write(data2save)
                    f.write('\n')
            entered = True
        except Exception as e:
            continue

profilesfull = []

profiles = open('dsmny.txt').read().splitlines()
for profile in profiles:
    string = profile.split(':')
    firstName = string[1]
    lastName = string[2]
    email = string[0]
    profilesfull.append({"firstName": firstName, "lastName": lastName, "email": email})

profilesentered = []

profiles = open('Entered-dsmny.txt').read().splitlines()
for profile in profiles:
    string = profile.split(':')
    email = string[0]
    try:
        size = string[1]
    except Exception as e:
        size = "None"
    try:
        color = string[2]
    except Exception as e:
        color = "None"
    profilesentered.append({"email": email, "size": size, "color": color})

profiles2enter = []

for item in profilesfull:
    if item['email'] not in [x['email'] for x in profilesentered]:
        firstName = item["firstName"]
        lastName = item["lastName"]
        email = item["email"]
        profiles2enter.append((firstName, lastName, email))

pool = ThreadPool(120)

while True:
    print("Starting")
    results = pool.map(multi_run_wrapper, profiles2enter)
    pool.close()
    pool.join()
    print(results)
